from tkinter import *
from tkinter import PhotoImage
import random

is_dark_mode = True

def toggle_mode():
    global is_dark_mode
    is_dark_mode = not is_dark_mode
    if is_dark_mode:
        set_dark_mode()
    else:
        set_light_mode()

def set_dark_mode():
    window.config(bg="#2C2C2C")
    lbl.config(bg="#2C2C2C", fg="white")
    lbl_name.config(bg="#2C2C2C", fg="white")
    lbl_section.config(bg="#2C2C2C", fg="white")
    lbl_word.config(bg="#2C2C2C", fg="white")
    lbl_hangman.config(bg="#2C2C2C", fg="red")
    lbl_message.config(bg="#2C2C2C", fg="white")
    lbl_hint.config(bg="#2C2C2C", fg="red")
    btn_start.config(bg="green", fg="white")
    btn_guess.config(bg="black", fg="white")
    btn_reset.config(bg="blue", fg="white")
    btn_mode_toggle.config(bg="white", fg="black")
    entry_name.config(bg="black", fg="white")
    entry_section.config(bg="black", fg="white")
    entry_guess.config(bg="black", fg="white")

# Function to apply light mode
def set_light_mode():
    window.config(bg="#F0F0F0")
    lbl.config(bg="#F0F0F0", fg="black")
    lbl_name.config(bg="#F0F0F0", fg="black")
    lbl_section.config(bg="#F0F0F0", fg="black")
    lbl_word.config(bg="#F0F0F0", fg="black")
    lbl_hangman.config(bg="#F0F0F0", fg="red")
    lbl_message.config(bg="#F0F0F0", fg="black")
    lbl_hint.config(bg="#F0F0F0", fg="red")
    btn_start.config(bg="green", fg="white")
    btn_guess.config(bg="black", fg="white")
    btn_reset.config(bg="blue", fg="white")
    btn_mode_toggle.config(bg="black", fg="white")
    entry_name.config(bg="white", fg="black")
    entry_section.config(bg="white", fg="black")
    entry_guess.config(bg="white", fg="black")


word_hints = {
    "python": "A popular programming language.",
    "hangman": "A classic word-guessing game.",
    "for": "entry controlled loops used to repeat a section of code known number of times.",
    "while": "entry controlled loops used to repeat a specific block of code an unknown number of times, until a condition is met.",
    "monitor": "An output device that displays information in pictorial or textual form. "
}

def start_game(event = None):
    global word, guessed_letters, attempts, word_completion, player_name, player_section

    player_name = entry_name.get()
    player_section = entry_section.get()
    
    if not player_name or not player_section:
        lbl_message.config(text="Please enter your name and section.")
        return

    word_list = ["python", "hangman", "for", "while", "monitor"]
    word = random.choice(word_list).lower()
    hint = word_hints[word]
    guessed_letters = []
    attempts = 6
    word_completion = "_ " * len(word)

    lbl_word.config(text=word_completion)
    lbl_hangman.config(text=display_hangman(attempts))
    lbl_message.config(text = "Guess the correct letter to win!!")
    lbl_hint.config(text=f"Hint: {hint}", fg = "red")
    lbl2 = Label(window, text=f"Welcome, {player_name} from {player_section}!", font = ("bookman old style", 35), fg = "cyan")

    entry_name.place_forget()
    lbl_name.place_forget()
    entry_section.place_forget()
    lbl_section.place_forget()
    btn_start.place_forget()
    lbl.place_forget()

    btn_guess.place(relx=0.5, rely=0.75, anchor='center')
    btn_reset.place(relx=0.5, rely=0.8, anchor='center')
    entry_guess.place(relx=0.5, rely=0.65, anchor='center')
    lbl2.place(relx=0.5, rely=0.05, anchor='center')
    lbl_word.place(relx=0.5, rely=0.55, anchor='center')
    lbl_hint.place(relx=0.5, rely=0.7, anchor='center')

    entry_guess.bind("<Return>", guess_letter)


def validate_guess_input(char):
    return len(char) == 0 or (len(char) == 1 and char.isalpha())

def guess_letter(event = None):
    global attempts, word_completion
    guess = entry_guess.get().lower()
    entry_guess.delete(0, END)

    if len(guess) != 1 or not guess.isalpha():
        lbl_message.config(text="Please enter a single letter.")
        return
    if guess in guessed_letters:
        lbl_message.config(text="You've already guessed that letter.")
        return

    guessed_letters.append(guess)

    if guess in word:
        lbl_message.config(text=f"Good guess: {guess}")
        word_completion = "".join([letter if letter in guessed_letters else "_ " for letter in word])
    else:
        attempts -= 1
        lbl_message.config(text=f"Wrong guess: {guess}. You have {attempts} attempts left.")

    lbl_word.config(text=word_completion)
    lbl_hangman.config(text=display_hangman(attempts))

    if "_ " not in word_completion:
        lbl_message.config(text="Congratulations! You've guessed the word: " + word)
        reset_game()
    elif attempts == 0:
        lbl_message.config(text="Game over! The word was: " + word)
        reset_game()

    entry_guess.bind("<Return>", guess_letter)

def reset_game():
    entry_guess.pack_forget()
    btn_guess.pack_forget()
    btn_reset.place()

def display_hangman(attempts):
    stages = [
        """
           ------
           |    |
           |    O
           |   /|\\
           |   / \\
           |
        """,
        """
           ------
           |    |
           |    O
           |   /|\\
           |   /
           |
        """,
        """
           ------
           |    |
           |    O
           |   /|
           |   /
           |
        """,
        """
           ------
           |    |
           |    O
           |   /|
           |   
           |
        """,
        """
           ------
           |    |
           |    O
           |    |
           |   
           |
        """,
        """
           ------
           |    |
           |    O
           |    
           |   
           |
        """,
        """
           ------
           |    |
           |    
           |    
           |   
           |
        """,
        """
           ------
           |    
           |    
           |    
           |   
           |
        """,
        """
           
           |    
           |    
           |    
           |   
           |
        """,
    ]
    return stages[attempts]

def reset():
    lbl_message.config(text="")
    start_game()

window = Tk()
window.title("Hangman")
window.state('zoomed')

logo = PhotoImage(file = "C:/Users/User/Downloads/logo.png")
window.iconphoto(False, logo)

lbl = Label(window, text="Welcome to Hangman", font=("Bookman Old Style", 40))
lbl.place(relx=0.5, rely=0.25, anchor='center')

lbl_name = Label(window, text="Enter your name:", font=("Bookman Old Style", 20))
lbl_name.place(relx=0.5, rely=0.35, anchor='center')
entry_name = Entry(window, font=("Bookman Old Style", 20), bg = "white", fg = "black")
entry_name.place(relx=0.5, rely=0.4, anchor='center')

lbl_section = Label(window, text="Enter your section:", font=("Bookman Old Style", 20))
lbl_section.place(relx=0.5, rely=0.45, anchor='center')
entry_section = Entry(window, font=("Bookman Old Style", 20), bg = "white", fg = "black")
entry_section.place(relx=0.5, rely=0.5, anchor='center')

btn_start = Button(window, text="Start Game", bg="green", fg="white", command = start_game)
btn_start.place(relx=0.5, rely=0.55, anchor='center')

btn_mode_toggle = Button(window, text = "Turn on/off", bg = "black", fg = "white" , command = toggle_mode)
btn_mode_toggle.place(relx = 0.1, rely = 0.2,)

lbl_word = Label(window, text="", font=("Bookman Old Style", 30))
lbl_word.place(relx=0.5, rely=0.5, anchor='center')
lbl_word.place_forget()

lbl_hangman = Label(window, text="", font=("Courier", 40), justify='left', fg = "red")
lbl_hangman.place(relx=0.45, rely=0.3, anchor='center')

lbl_message = Label(window, text="", font=("Bookman Old Style", 20))
lbl_message.place(relx=0.5, rely=0.1, anchor='center')

lbl_hint = Label(window, text="", font=("Bookman Old Style", 20))  # Hint label
lbl_hint.place(relx=0.5, rely=0.6, anchor='center')
lbl_hint.place_forget()

entry_guess = Entry(window, font=("Bookman Old Style", 20), width=5)
entry_guess.place(relx=0.5, rely=0.65, anchor='center')
entry_guess.place_forget()

btn_guess = Button(window, text="Guess Letter", bg="black", fg="white", command=guess_letter)
btn_guess.place(relx=0.5, rely=0.75, anchor='center')
btn_guess.place_forget()

btn_reset = Button(window, text="Play Again", bg="blue", fg="white", command=reset)
btn_reset.place(relx=0.5, rely=0.87, anchor='center')
btn_reset.place_forget()

entry_limit = (window.register(validate_guess_input), '%P')  # '%P' passes the current value of the widget

entry_guess = Entry(window, font=("Bookman Old Style", 20), width=5, validate='key', validatecommand=entry_limit)
entry_guess.place(relx=0.5, rely=0.65, anchor='center')
entry_guess.place_forget()


window.mainloop()
